import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from openpyxl import Workbook
from openpyxl.styles import Alignment, Font, Border, Side

st.title("Pocono Top 16 Lane Choice Analyzer & Formatter")

# --- Load the processed results dataframe ---
results_df = pd.read_excel("results_with_choose_distance_and_lane.xlsx")
results_df.columns = results_df.columns.str.strip()

lap_options = sorted(results_df['Lap'].dropna().unique())
selected_lap = st.selectbox("Select Restart Lap", lap_options)

# --- Show top 16 drivers for this lap ---
lap_df = results_df[results_df['Lap'] == selected_lap].sort_values('Position_Before_Choose').head(16)
st.subheader(f"Top 16 Drivers at Lap {selected_lap}")
st.dataframe(
    lap_df[['Driver', 'Position_Before_Choose', 'Choose Distance (ft)', 'Lane Choice']].reset_index(drop=True)
)

# --- Download and visualization buttons side-by-side ---
col1, col2 = st.columns([1, 1])
with col1:
    excel_buffer = BytesIO()
    lap_df.to_excel(excel_buffer, index=False, engine='openpyxl')
    excel_buffer.seek(0)
    st.download_button(
        label=f"Download Data for Lap {selected_lap} (Excel)",
        data=excel_buffer,
        file_name=f"Lane_Choice_Lap_{selected_lap}.xlsx",
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

with col2:
    show_viz = st.button("Show Visualization for This Lap")

if show_viz:
    st.subheader("Lane Choice Count (This Lap)")
    lane_counts = lap_df['Lane Choice'].value_counts()
    fig, ax = plt.subplots()
    ax.bar(lane_counts.index, lane_counts.values, color=['green','orange'])
    ax.set_xlabel("Lane Choice")
    ax.set_ylabel("Number of Drivers")
    st.pyplot(fig)

# --- Button to generate FORMATTED Excel for 4 laps (as in your format) ---
def generate_formatted_excel(df):
    anchors = [
        (4, 3),    # C4
        (4, 20),   # T4
        (23, 3),   # C23
        (23, 20),  # T23
    ]

    wb = Workbook()
    ws = wb.active
    ws.title = "Line Up Sheet"

    # Title setup (Race and Date)
    ws.merge_cells(start_row=2, start_column=3, end_row=2, end_column=7)
    cell = ws.cell(row=2, column=3, value="Race: 25POC")
    cell.font = Font(bold=True, size=16)
    cell.alignment = Alignment(horizontal='left', vertical='center')

    ws.merge_cells(start_row=2, start_column=14, end_row=2, end_column=15)
    date_label = ws.cell(row=2, column=14, value="Date")
    date_label.alignment = Alignment(horizontal='center', vertical='center')
    date_label.font = Font(bold=True, size=14)

    ws.merge_cells(start_row=2, start_column=19, end_row=2, end_column=21)
    date_value = ws.cell(row=2, column=19, value="6/22/25")
    date_value.alignment = Alignment(horizontal='center', vertical='center')
    date_value.font = Font(bold=True, size=14)

    # Borders and fonts
    thick = Side(border_style="thick", color="000000")
    thin = Side(border_style="thin", color="000000")
    header_font = Font(bold=True, size=12)
    lap_font = Font(bold=True, size=11)
    center = Alignment(horizontal='center', vertical='center')

    # Get first 4 laps (anchors are set for 4 tables)
    lap_numbers = sorted(df['Lap'].unique())[:4]

    for i, lap in enumerate(lap_numbers):
        anchor_row, anchor_col = anchors[i]
        # Lap label
        ws.merge_cells(start_row=anchor_row, start_column=anchor_col, end_row=anchor_row, end_column=anchor_col+3)
        lap_label = ws.cell(row=anchor_row, column=anchor_col, value=f"Lap {lap}")
        lap_label.font = lap_font
        lap_label.alignment = center

        # Header
        ws.cell(row=anchor_row+1, column=anchor_col, value="Driver")
        ws.cell(row=anchor_row+1, column=anchor_col+1, value="Inside")
        ws.cell(row=anchor_row+1, column=anchor_col+2, value="Outside")
        for h in range(3):
            head = ws.cell(row=anchor_row+1, column=anchor_col+h)
            head.font = header_font
            head.alignment = center

        # 16 rows for each position
        lap_df = df[df["Lap"] == lap].sort_values(by="Position_Before_Choose")
        for pos in range(1, 17):
            ws.cell(row=anchor_row+1+pos, column=anchor_col-1, value=pos)
            ws.cell(row=anchor_row+1+pos, column=anchor_col-1).alignment = center

            driver_info = ""
            inside = outside = ""
            driver_row = lap_df[lap_df["Position_Before_Choose"] == pos]
            if not driver_row.empty:
                driver_info = str(driver_row.iloc[0]["Driver"])
                lane = str(driver_row.iloc[0]["Lane Choice"]).strip().lower()
                if lane == "inside":
                    inside = driver_info
                elif lane == "outside":
                    outside = driver_info
            ws.cell(row=anchor_row+1+pos, column=anchor_col, value=driver_info)
            ws.cell(row=anchor_row+1+pos, column=anchor_col+1, value=inside)
            ws.cell(row=anchor_row+1+pos, column=anchor_col+2, value=outside)
            # Center all
            ws.cell(row=anchor_row+1+pos, column=anchor_col).alignment = center
            ws.cell(row=anchor_row+1+pos, column=anchor_col+1).alignment = center
            ws.cell(row=anchor_row+1+pos, column=anchor_col+2).alignment = center

        # Draw thick border for outer box, thin for inner
        for r in range(anchor_row, anchor_row+18):
            for c in range(anchor_col-1, anchor_col+3):
                cell = ws.cell(row=r, column=c)
                left = thick if c == anchor_col-1 else thin
                right = thick if c == anchor_col+2 else thin
                top = thick if r == anchor_row else thin
                bottom = thick if r == anchor_row+17 else thin
                cell.border = Border(left=left, right=right, top=top, bottom=bottom)
                cell.alignment = center

    # Set column widths for tidy appearance
    for col in range(3, 24):
        ws.column_dimensions[chr(64+col)].width = 4.5
    ws.column_dimensions['B'].width = 5
    ws.column_dimensions['S'].width = 5

    output = BytesIO()
    wb.save(output)
    output.seek(0)
    return output

st.markdown("---")
if st.button("Generate and Download Ketaki_PoconoTest Formatted Excel"):
    formatted_excel = generate_formatted_excel(results_df)
    st.download_button(
        label="Download Ketaki_PoconoTest.xlsx",
        data=formatted_excel,
        file_name="Ketaki_PoconoTest.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    st.success("File is ready for download!")

st.info("Analyze any lap, download per-lap Excel, visualize with a button, or generate the full formatted Excel for all four laps.")
